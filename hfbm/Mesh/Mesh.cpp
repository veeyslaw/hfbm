#include "Mesh.h"
#include <fstream>
#include <glm.hpp>
#include <gtx/normal.hpp>

#define GLM_SWIZZLE

#define STL_HEADER_LENGTH 80

Mesh::Mesh(const std::vector<Vertex>& vertices) :
	vertices(vertices),
	noOfVertices(vertices.size()) {}

Mesh::~Mesh() {

}

void writeVector(std::ofstream& ofs, const glm::fvec3& vector) {
	ofs.write(reinterpret_cast<const char*>(&vector[0]), sizeof vector[0]);
	ofs.write(reinterpret_cast<const char*>(&vector[1]), sizeof vector[1]);
	ofs.write(reinterpret_cast<const char*>(&vector[2]), sizeof vector[2]);
}

void Mesh::saveToSTL(const std::string& path) const {
	// This field will not be used
	static const uint16_t attribByteCount = 0;

	std::ofstream fileStream(path, std::ios_base::out | std::ios::binary);
	if (!fileStream.is_open()) {
		// TODO handle error
		return;
	}
	

	std::string header("STL generated by hfbm");
	header.reserve(STL_HEADER_LENGTH);
	header.insert(header.size(), STL_HEADER_LENGTH - header.size(), ' ');

	fileStream.write(header.c_str(), STL_HEADER_LENGTH);

	auto noOfTriangles = getNoOfTriangles();
	fileStream.write(reinterpret_cast<const char*>(&noOfTriangles), sizeof noOfTriangles);

	for (auto i = 0; i < noOfVertices; i+=3) {
		auto vertex1 = vertices.at((uint64_t)i).position;
		auto vertex2 = vertices.at((uint64_t)i + 1).position;
		auto vertex3 = vertices.at((uint64_t)i + 2).position;

		auto normal = glm::triangleNormal(vertex1, vertex2, vertex3);

		writeVector(fileStream, normal);
		writeVector(fileStream, vertex1);
		writeVector(fileStream, vertex2);
		writeVector(fileStream, vertex3);

		fileStream.write(reinterpret_cast<const char*>(&attribByteCount), sizeof attribByteCount);
	}
}